# Mersal QR Notes
In today's digital age, memories are often captured in videos and voice notes. Recognizing the profound emotional value of these personal mementos, I created this service which allows adding a QR code on top of a physical item, wrapped as a gift, 
so that a gift-receiver can scan that code, and they will be navigated to a media player, where they can hear the sender's note (be it audio or video) 
![Alt Text](image-url)
---
<p align="center">
  <img src="image1-url" width="400" alt="Image 1">
  <img src="image2-url" width="400" alt="Image 2">
</p>
---

## Project Overview
This project is designed to enhance the media management process by creating a seamless workflow for handling and branding uploaded notes.
The system comprises four modules: note-handler, qr-handler, SAM template, and tests for S3 events.

## Modules
1. Note-handler
The note-handler module is the starting point of the workflow. When an admin uploads a new note (MP3 or MP4) to the media-s3 bucket, this module takes charge.
It notifies the qr-manager Lambda function and generates a QR code containing the path to the newly received media.

2. Qr-handler
The qr-handler module comes into play when the QR code needs further processing. It is triggered by the upload of the QR code to the qr-bucket. The qr-handler Lambda function retrieves a pre-signed URL for the QR code file and emails it as an attachment to the admin. This ensures that the admin can conveniently download and use the branded QR code.

3. SAM Template
The SAM template is responsible for defining the AWS resources required for deploying and running the project. It simplifies the process of creating and managing the AWS resources needed for the Lambda functions, S3 buckets, and other components.

4. Tests (S3 Events)
The tests module contains test cases for S3 events, ensuring that the workflow functions as expected. Robust testing is a crucial part of maintaining the reliability and functionality of the system.

## How It Works
- Admin uploads a new note (MP3 or MP4) to the media-s3 bucket.
- note-handler module notifies the qr-manager Lambda function.
- QR code containing the media path is generated by note-handler.
- QR code is branded based on branding resources.
- Branded QR code is uploaded to the qr-bucket.
- qr-handler module is triggered by the upload to qr-bucket.
- qr-handler retrieves a pre-signed URL for the QR code file.
- Admin receives an email with the branded QR code as an attachment.

## Deployment Instructions
To deploy the project on AWS, follow these steps:
1. Clone the repository to your local machine.
2. Navigate to the project directory.
4. Configure project parameters:
    - template.yaml -> Parameters
5. Customize project brand:
    - note-handler\assets: envelop, logo
    - qr-handler\assets: email_template, logo
6. Use the AWS CLI to deploy the project using the SAM template, template.yaml.

## Testing
To test the project, follow these steps to trigger the workflow:
Ensure the project is deployed on AWS.

### Locally
*Docker required*
- ``sam package --s3-bucket mersalqr-src-code --template-file template.yaml --output-template-file gen/template-generated.yaml``
- ``sam local invoke NewObjectDetectedLambda -e tests/new_note_event.json``
- ``sam local invoke NewQRDetectedLambda -e tests/new_qr_event.json``

### AWS
Use the AWS CLI or AWS Management Console to upload a new media file to the media-s3 bucket.
Monitor the AWS CloudWatch logs for each Lambda function to verify successful execution.
Check the admin email for the branded QR code attachment.

``sam package --s3-bucket mersalqr-src-code --template-file template.yaml --output-template-file gen/template-generated.yaml``
``sam deploy --template-file gen/template-generated.yaml --stack-name mersal-qrcode-stack --capabilities CAPABILITY_IAM``
``aws s3 cp <local_directory>\note_cover.jpg s3://xxxx-xxxx-bucket``
``aws s3 cp <local_directory>\note_audio.mp3 s3://xxxx-xxxx-bucket``
``aws s3 cp <local_directory>\note_video.mp4 s3://xxxx-xxxx-bucket``

Congratulations! You have successfully deployed and tested the AwesomeMediaProject. 
